// Generated by Dagger (https://dagger.dev).
package ru.ohayo.moneypr.viewModel;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import ru.ohayo.moneypr.data.repository.AccountRepository;
import ru.ohayo.moneypr.data.repository.CategoryRepository;
import ru.ohayo.moneypr.data.repository.CurrencyRepository;
import ru.ohayo.moneypr.data.repository.TransactionRepository;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class TransactionViewModel_Factory implements Factory<TransactionViewModel> {
  private final Provider<TransactionRepository> repositoryProvider;

  private final Provider<AccountRepository> accountRepositoryProvider;

  private final Provider<CurrencyRepository> currencyRepositoryProvider;

  private final Provider<CategoryRepository> categoryRepositoryProvider;

  public TransactionViewModel_Factory(Provider<TransactionRepository> repositoryProvider,
      Provider<AccountRepository> accountRepositoryProvider,
      Provider<CurrencyRepository> currencyRepositoryProvider,
      Provider<CategoryRepository> categoryRepositoryProvider) {
    this.repositoryProvider = repositoryProvider;
    this.accountRepositoryProvider = accountRepositoryProvider;
    this.currencyRepositoryProvider = currencyRepositoryProvider;
    this.categoryRepositoryProvider = categoryRepositoryProvider;
  }

  @Override
  public TransactionViewModel get() {
    return newInstance(repositoryProvider.get(), accountRepositoryProvider.get(), currencyRepositoryProvider.get(), categoryRepositoryProvider.get());
  }

  public static TransactionViewModel_Factory create(
      Provider<TransactionRepository> repositoryProvider,
      Provider<AccountRepository> accountRepositoryProvider,
      Provider<CurrencyRepository> currencyRepositoryProvider,
      Provider<CategoryRepository> categoryRepositoryProvider) {
    return new TransactionViewModel_Factory(repositoryProvider, accountRepositoryProvider, currencyRepositoryProvider, categoryRepositoryProvider);
  }

  public static TransactionViewModel newInstance(TransactionRepository repository,
      AccountRepository accountRepository, CurrencyRepository currencyRepository,
      CategoryRepository categoryRepository) {
    return new TransactionViewModel(repository, accountRepository, currencyRepository, categoryRepository);
  }
}
