// Generated by Dagger (https://dagger.dev).
package ru.ohayo.moneypr;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.ViewModelLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory;
import dagger.hilt.android.internal.managers.SavedStateHandleHolder;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.IdentifierNameString;
import dagger.internal.KeepFieldType;
import dagger.internal.LazyClassKeyMap;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import dagger.internal.Provider;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import ru.ohayo.moneypr.data.room.AppDatabase;
import ru.ohayo.moneypr.data.room.account.AccountDao;
import ru.ohayo.moneypr.data.room.category.CategoryDao;
import ru.ohayo.moneypr.data.room.currency.CurrencyDao;
import ru.ohayo.moneypr.data.room.transaction.TransactionDao;
import ru.ohayo.moneypr.di.AppModule_ProvideAccountDaoFactory;
import ru.ohayo.moneypr.di.AppModule_ProvideAccountRepositoryFactory;
import ru.ohayo.moneypr.di.AppModule_ProvideAppDatabaseFactory;
import ru.ohayo.moneypr.di.AppModule_ProvideCategoryDaoFactory;
import ru.ohayo.moneypr.di.AppModule_ProvideCategoryRepositoryFactory;
import ru.ohayo.moneypr.di.AppModule_ProvideCurrencyDaoFactory;
import ru.ohayo.moneypr.di.AppModule_ProvideCurrencyRepositoryFactory;
import ru.ohayo.moneypr.di.AppModule_ProvideEvaluateExpressionUseCaseFactory;
import ru.ohayo.moneypr.di.AppModule_ProvideExpressionRepositoryFactory;
import ru.ohayo.moneypr.di.AppModule_ProvideTransactionDaoFactory;
import ru.ohayo.moneypr.repository.AccountRepository;
import ru.ohayo.moneypr.repository.AddCategoryRepository;
import ru.ohayo.moneypr.repository.CategoryRepository;
import ru.ohayo.moneypr.repository.CurrencyRepository;
import ru.ohayo.moneypr.repository.ExpressionRepository;
import ru.ohayo.moneypr.repository.TransactionRepository;
import ru.ohayo.moneypr.ui.component.customeKeyboard.ExpressionCalculator;
import ru.ohayo.moneypr.ui.screens.accountScreen.AccountViewModel;
import ru.ohayo.moneypr.ui.screens.accountScreen.AccountViewModel_HiltModules;
import ru.ohayo.moneypr.ui.screens.addCategory.AddCategoryViewModel;
import ru.ohayo.moneypr.ui.screens.addCategory.AddCategoryViewModel_HiltModules;
import ru.ohayo.moneypr.ui.screens.addTransaction.KeyboardViewModel;
import ru.ohayo.moneypr.ui.screens.addTransaction.KeyboardViewModel_HiltModules;
import ru.ohayo.moneypr.ui.screens.addTransaction.TransactionViewModel;
import ru.ohayo.moneypr.ui.screens.addTransaction.TransactionViewModel_HiltModules;
import ru.ohayo.moneypr.ui.screens.bottomNavigator.BottomNavViewModel;
import ru.ohayo.moneypr.ui.screens.bottomNavigator.BottomNavViewModel_HiltModules;
import ru.ohayo.moneypr.ui.screens.categoryList.CategoryViewModel;
import ru.ohayo.moneypr.ui.screens.categoryList.CategoryViewModel_HiltModules;
import ru.ohayo.moneypr.ui.screens.charts.ChartsVM;
import ru.ohayo.moneypr.ui.screens.charts.ChartsVM_HiltModules;
import ru.ohayo.moneypr.ui.screens.currencyScreen.CurrencyViewModel;
import ru.ohayo.moneypr.ui.screens.currencyScreen.CurrencyViewModel_HiltModules;
import ru.ohayo.moneypr.ui.screens.transactionList.TransactionListViewModel;
import ru.ohayo.moneypr.ui.screens.transactionList.TransactionListViewModel_HiltModules;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class DaggerMoneyPrApp_HiltComponents_SingletonC {
  private DaggerMoneyPrApp_HiltComponents_SingletonC() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    public MoneyPrApp_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new SingletonCImpl(applicationContextModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements MoneyPrApp_HiltComponents.ActivityRetainedC.Builder {
    private final SingletonCImpl singletonCImpl;

    private SavedStateHandleHolder savedStateHandleHolder;

    private ActivityRetainedCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public ActivityRetainedCBuilder savedStateHandleHolder(
        SavedStateHandleHolder savedStateHandleHolder) {
      this.savedStateHandleHolder = Preconditions.checkNotNull(savedStateHandleHolder);
      return this;
    }

    @Override
    public MoneyPrApp_HiltComponents.ActivityRetainedC build() {
      Preconditions.checkBuilderRequirement(savedStateHandleHolder, SavedStateHandleHolder.class);
      return new ActivityRetainedCImpl(singletonCImpl, savedStateHandleHolder);
    }
  }

  private static final class ActivityCBuilder implements MoneyPrApp_HiltComponents.ActivityC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public MoneyPrApp_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonCImpl, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements MoneyPrApp_HiltComponents.FragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public MoneyPrApp_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements MoneyPrApp_HiltComponents.ViewWithFragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public MoneyPrApp_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements MoneyPrApp_HiltComponents.ViewC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public MoneyPrApp_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements MoneyPrApp_HiltComponents.ViewModelC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelLifecycle viewModelLifecycle;

    private ViewModelCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public ViewModelCBuilder viewModelLifecycle(ViewModelLifecycle viewModelLifecycle) {
      this.viewModelLifecycle = Preconditions.checkNotNull(viewModelLifecycle);
      return this;
    }

    @Override
    public MoneyPrApp_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      Preconditions.checkBuilderRequirement(viewModelLifecycle, ViewModelLifecycle.class);
      return new ViewModelCImpl(singletonCImpl, activityRetainedCImpl, savedStateHandle, viewModelLifecycle);
    }
  }

  private static final class ServiceCBuilder implements MoneyPrApp_HiltComponents.ServiceC.Builder {
    private final SingletonCImpl singletonCImpl;

    private Service service;

    private ServiceCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public MoneyPrApp_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonCImpl, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends MoneyPrApp_HiltComponents.ViewWithFragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends MoneyPrApp_HiltComponents.FragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }
  }

  private static final class ViewCImpl extends MoneyPrApp_HiltComponents.ViewC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends MoneyPrApp_HiltComponents.ActivityC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(getViewModelKeys(), new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl));
    }

    @Override
    public Map<Class<?>, Boolean> getViewModelKeys() {
      return LazyClassKeyMap.<Boolean>of(MapBuilder.<String, Boolean>newMapBuilder(9).put(LazyClassKeyProvider.ru_ohayo_moneypr_ui_screens_accountScreen_AccountViewModel, AccountViewModel_HiltModules.KeyModule.provide()).put(LazyClassKeyProvider.ru_ohayo_moneypr_ui_screens_addCategory_AddCategoryViewModel, AddCategoryViewModel_HiltModules.KeyModule.provide()).put(LazyClassKeyProvider.ru_ohayo_moneypr_ui_screens_bottomNavigator_BottomNavViewModel, BottomNavViewModel_HiltModules.KeyModule.provide()).put(LazyClassKeyProvider.ru_ohayo_moneypr_ui_screens_categoryList_CategoryViewModel, CategoryViewModel_HiltModules.KeyModule.provide()).put(LazyClassKeyProvider.ru_ohayo_moneypr_ui_screens_charts_ChartsVM, ChartsVM_HiltModules.KeyModule.provide()).put(LazyClassKeyProvider.ru_ohayo_moneypr_ui_screens_currencyScreen_CurrencyViewModel, CurrencyViewModel_HiltModules.KeyModule.provide()).put(LazyClassKeyProvider.ru_ohayo_moneypr_ui_screens_addTransaction_KeyboardViewModel, KeyboardViewModel_HiltModules.KeyModule.provide()).put(LazyClassKeyProvider.ru_ohayo_moneypr_ui_screens_transactionList_TransactionListViewModel, TransactionListViewModel_HiltModules.KeyModule.provide()).put(LazyClassKeyProvider.ru_ohayo_moneypr_ui_screens_addTransaction_TransactionViewModel, TransactionViewModel_HiltModules.KeyModule.provide()).build());
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public void injectMainActivity(MainActivity mainActivity) {
    }

    @IdentifierNameString
    private static final class LazyClassKeyProvider {
      static String ru_ohayo_moneypr_ui_screens_charts_ChartsVM = "ru.ohayo.moneypr.ui.screens.charts.ChartsVM";

      static String ru_ohayo_moneypr_ui_screens_addCategory_AddCategoryViewModel = "ru.ohayo.moneypr.ui.screens.addCategory.AddCategoryViewModel";

      static String ru_ohayo_moneypr_ui_screens_bottomNavigator_BottomNavViewModel = "ru.ohayo.moneypr.ui.screens.bottomNavigator.BottomNavViewModel";

      static String ru_ohayo_moneypr_ui_screens_accountScreen_AccountViewModel = "ru.ohayo.moneypr.ui.screens.accountScreen.AccountViewModel";

      static String ru_ohayo_moneypr_ui_screens_transactionList_TransactionListViewModel = "ru.ohayo.moneypr.ui.screens.transactionList.TransactionListViewModel";

      static String ru_ohayo_moneypr_ui_screens_currencyScreen_CurrencyViewModel = "ru.ohayo.moneypr.ui.screens.currencyScreen.CurrencyViewModel";

      static String ru_ohayo_moneypr_ui_screens_addTransaction_KeyboardViewModel = "ru.ohayo.moneypr.ui.screens.addTransaction.KeyboardViewModel";

      static String ru_ohayo_moneypr_ui_screens_addTransaction_TransactionViewModel = "ru.ohayo.moneypr.ui.screens.addTransaction.TransactionViewModel";

      static String ru_ohayo_moneypr_ui_screens_categoryList_CategoryViewModel = "ru.ohayo.moneypr.ui.screens.categoryList.CategoryViewModel";

      @KeepFieldType
      ChartsVM ru_ohayo_moneypr_ui_screens_charts_ChartsVM2;

      @KeepFieldType
      AddCategoryViewModel ru_ohayo_moneypr_ui_screens_addCategory_AddCategoryViewModel2;

      @KeepFieldType
      BottomNavViewModel ru_ohayo_moneypr_ui_screens_bottomNavigator_BottomNavViewModel2;

      @KeepFieldType
      AccountViewModel ru_ohayo_moneypr_ui_screens_accountScreen_AccountViewModel2;

      @KeepFieldType
      TransactionListViewModel ru_ohayo_moneypr_ui_screens_transactionList_TransactionListViewModel2;

      @KeepFieldType
      CurrencyViewModel ru_ohayo_moneypr_ui_screens_currencyScreen_CurrencyViewModel2;

      @KeepFieldType
      KeyboardViewModel ru_ohayo_moneypr_ui_screens_addTransaction_KeyboardViewModel2;

      @KeepFieldType
      TransactionViewModel ru_ohayo_moneypr_ui_screens_addTransaction_TransactionViewModel2;

      @KeepFieldType
      CategoryViewModel ru_ohayo_moneypr_ui_screens_categoryList_CategoryViewModel2;
    }
  }

  private static final class ViewModelCImpl extends MoneyPrApp_HiltComponents.ViewModelC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<AccountViewModel> accountViewModelProvider;

    private Provider<AddCategoryViewModel> addCategoryViewModelProvider;

    private Provider<BottomNavViewModel> bottomNavViewModelProvider;

    private Provider<CategoryViewModel> categoryViewModelProvider;

    private Provider<ChartsVM> chartsVMProvider;

    private Provider<CurrencyViewModel> currencyViewModelProvider;

    private Provider<KeyboardViewModel> keyboardViewModelProvider;

    private Provider<TransactionListViewModel> transactionListViewModelProvider;

    private Provider<TransactionViewModel> transactionViewModelProvider;

    private ViewModelCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam,
        ViewModelLifecycle viewModelLifecycleParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(savedStateHandleParam, viewModelLifecycleParam);

    }

    private TransactionRepository transactionRepository() {
      return new TransactionRepository(singletonCImpl.provideTransactionDaoProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam,
        final ViewModelLifecycle viewModelLifecycleParam) {
      this.accountViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 0);
      this.addCategoryViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 1);
      this.bottomNavViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 2);
      this.categoryViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 3);
      this.chartsVMProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 4);
      this.currencyViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 5);
      this.keyboardViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 6);
      this.transactionListViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 7);
      this.transactionViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 8);
    }

    @Override
    public Map<Class<?>, javax.inject.Provider<ViewModel>> getHiltViewModelMap() {
      return LazyClassKeyMap.<javax.inject.Provider<ViewModel>>of(MapBuilder.<String, javax.inject.Provider<ViewModel>>newMapBuilder(9).put(LazyClassKeyProvider.ru_ohayo_moneypr_ui_screens_accountScreen_AccountViewModel, ((Provider) accountViewModelProvider)).put(LazyClassKeyProvider.ru_ohayo_moneypr_ui_screens_addCategory_AddCategoryViewModel, ((Provider) addCategoryViewModelProvider)).put(LazyClassKeyProvider.ru_ohayo_moneypr_ui_screens_bottomNavigator_BottomNavViewModel, ((Provider) bottomNavViewModelProvider)).put(LazyClassKeyProvider.ru_ohayo_moneypr_ui_screens_categoryList_CategoryViewModel, ((Provider) categoryViewModelProvider)).put(LazyClassKeyProvider.ru_ohayo_moneypr_ui_screens_charts_ChartsVM, ((Provider) chartsVMProvider)).put(LazyClassKeyProvider.ru_ohayo_moneypr_ui_screens_currencyScreen_CurrencyViewModel, ((Provider) currencyViewModelProvider)).put(LazyClassKeyProvider.ru_ohayo_moneypr_ui_screens_addTransaction_KeyboardViewModel, ((Provider) keyboardViewModelProvider)).put(LazyClassKeyProvider.ru_ohayo_moneypr_ui_screens_transactionList_TransactionListViewModel, ((Provider) transactionListViewModelProvider)).put(LazyClassKeyProvider.ru_ohayo_moneypr_ui_screens_addTransaction_TransactionViewModel, ((Provider) transactionViewModelProvider)).build());
    }

    @Override
    public Map<Class<?>, Object> getHiltViewModelAssistedMap() {
      return Collections.<Class<?>, Object>emptyMap();
    }

    @IdentifierNameString
    private static final class LazyClassKeyProvider {
      static String ru_ohayo_moneypr_ui_screens_addTransaction_TransactionViewModel = "ru.ohayo.moneypr.ui.screens.addTransaction.TransactionViewModel";

      static String ru_ohayo_moneypr_ui_screens_categoryList_CategoryViewModel = "ru.ohayo.moneypr.ui.screens.categoryList.CategoryViewModel";

      static String ru_ohayo_moneypr_ui_screens_addCategory_AddCategoryViewModel = "ru.ohayo.moneypr.ui.screens.addCategory.AddCategoryViewModel";

      static String ru_ohayo_moneypr_ui_screens_accountScreen_AccountViewModel = "ru.ohayo.moneypr.ui.screens.accountScreen.AccountViewModel";

      static String ru_ohayo_moneypr_ui_screens_addTransaction_KeyboardViewModel = "ru.ohayo.moneypr.ui.screens.addTransaction.KeyboardViewModel";

      static String ru_ohayo_moneypr_ui_screens_charts_ChartsVM = "ru.ohayo.moneypr.ui.screens.charts.ChartsVM";

      static String ru_ohayo_moneypr_ui_screens_bottomNavigator_BottomNavViewModel = "ru.ohayo.moneypr.ui.screens.bottomNavigator.BottomNavViewModel";

      static String ru_ohayo_moneypr_ui_screens_currencyScreen_CurrencyViewModel = "ru.ohayo.moneypr.ui.screens.currencyScreen.CurrencyViewModel";

      static String ru_ohayo_moneypr_ui_screens_transactionList_TransactionListViewModel = "ru.ohayo.moneypr.ui.screens.transactionList.TransactionListViewModel";

      @KeepFieldType
      TransactionViewModel ru_ohayo_moneypr_ui_screens_addTransaction_TransactionViewModel2;

      @KeepFieldType
      CategoryViewModel ru_ohayo_moneypr_ui_screens_categoryList_CategoryViewModel2;

      @KeepFieldType
      AddCategoryViewModel ru_ohayo_moneypr_ui_screens_addCategory_AddCategoryViewModel2;

      @KeepFieldType
      AccountViewModel ru_ohayo_moneypr_ui_screens_accountScreen_AccountViewModel2;

      @KeepFieldType
      KeyboardViewModel ru_ohayo_moneypr_ui_screens_addTransaction_KeyboardViewModel2;

      @KeepFieldType
      ChartsVM ru_ohayo_moneypr_ui_screens_charts_ChartsVM2;

      @KeepFieldType
      BottomNavViewModel ru_ohayo_moneypr_ui_screens_bottomNavigator_BottomNavViewModel2;

      @KeepFieldType
      CurrencyViewModel ru_ohayo_moneypr_ui_screens_currencyScreen_CurrencyViewModel2;

      @KeepFieldType
      TransactionListViewModel ru_ohayo_moneypr_ui_screens_transactionList_TransactionListViewModel2;
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          ViewModelCImpl viewModelCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // ru.ohayo.moneypr.ui.screens.accountScreen.AccountViewModel 
          return (T) new AccountViewModel(singletonCImpl.provideAccountRepositoryProvider.get());

          case 1: // ru.ohayo.moneypr.ui.screens.addCategory.AddCategoryViewModel 
          return (T) new AddCategoryViewModel(singletonCImpl.addCategoryRepositoryProvider.get());

          case 2: // ru.ohayo.moneypr.ui.screens.bottomNavigator.BottomNavViewModel 
          return (T) new BottomNavViewModel();

          case 3: // ru.ohayo.moneypr.ui.screens.categoryList.CategoryViewModel 
          return (T) new CategoryViewModel(singletonCImpl.provideCategoryRepositoryProvider.get());

          case 4: // ru.ohayo.moneypr.ui.screens.charts.ChartsVM 
          return (T) new ChartsVM(viewModelCImpl.transactionRepository());

          case 5: // ru.ohayo.moneypr.ui.screens.currencyScreen.CurrencyViewModel 
          return (T) new CurrencyViewModel(singletonCImpl.provideCurrencyRepositoryProvider.get());

          case 6: // ru.ohayo.moneypr.ui.screens.addTransaction.KeyboardViewModel 
          return (T) new KeyboardViewModel(singletonCImpl.provideEvaluateExpressionUseCaseProvider.get(), singletonCImpl.provideExpressionRepositoryProvider.get());

          case 7: // ru.ohayo.moneypr.ui.screens.transactionList.TransactionListViewModel 
          return (T) new TransactionListViewModel(viewModelCImpl.transactionRepository());

          case 8: // ru.ohayo.moneypr.ui.screens.addTransaction.TransactionViewModel 
          return (T) new TransactionViewModel(viewModelCImpl.transactionRepository(), singletonCImpl.provideAccountRepositoryProvider.get(), singletonCImpl.provideCurrencyRepositoryProvider.get(), singletonCImpl.provideCategoryRepositoryProvider.get());

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends MoneyPrApp_HiltComponents.ActivityRetainedC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    private Provider<ActivityRetainedLifecycle> provideActivityRetainedLifecycleProvider;

    private ActivityRetainedCImpl(SingletonCImpl singletonCImpl,
        SavedStateHandleHolder savedStateHandleHolderParam) {
      this.singletonCImpl = singletonCImpl;

      initialize(savedStateHandleHolderParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandleHolder savedStateHandleHolderParam) {
      this.provideActivityRetainedLifecycleProvider = DoubleCheck.provider(new SwitchingProvider<ActivityRetainedLifecycle>(singletonCImpl, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return provideActivityRetainedLifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.ActivityRetainedLifecycle 
          return (T) ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory.provideActivityRetainedLifecycle();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends MoneyPrApp_HiltComponents.ServiceC {
    private final SingletonCImpl singletonCImpl;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(SingletonCImpl singletonCImpl, Service serviceParam) {
      this.singletonCImpl = singletonCImpl;


    }
  }

  private static final class SingletonCImpl extends MoneyPrApp_HiltComponents.SingletonC {
    private final ApplicationContextModule applicationContextModule;

    private final SingletonCImpl singletonCImpl = this;

    private Provider<AppDatabase> provideAppDatabaseProvider;

    private Provider<CategoryDao> provideCategoryDaoProvider;

    private Provider<CategoryRepository> provideCategoryRepositoryProvider;

    private Provider<AccountDao> provideAccountDaoProvider;

    private Provider<AccountRepository> provideAccountRepositoryProvider;

    private Provider<CurrencyDao> provideCurrencyDaoProvider;

    private Provider<CurrencyRepository> provideCurrencyRepositoryProvider;

    private Provider<AddCategoryRepository> addCategoryRepositoryProvider;

    private Provider<TransactionDao> provideTransactionDaoProvider;

    private Provider<ExpressionCalculator> provideEvaluateExpressionUseCaseProvider;

    private Provider<ExpressionRepository> provideExpressionRepositoryProvider;

    private SingletonCImpl(ApplicationContextModule applicationContextModuleParam) {
      this.applicationContextModule = applicationContextModuleParam;
      initialize(applicationContextModuleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final ApplicationContextModule applicationContextModuleParam) {
      this.provideAppDatabaseProvider = DoubleCheck.provider(new SwitchingProvider<AppDatabase>(singletonCImpl, 2));
      this.provideCategoryDaoProvider = DoubleCheck.provider(new SwitchingProvider<CategoryDao>(singletonCImpl, 1));
      this.provideCategoryRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<CategoryRepository>(singletonCImpl, 0));
      this.provideAccountDaoProvider = DoubleCheck.provider(new SwitchingProvider<AccountDao>(singletonCImpl, 4));
      this.provideAccountRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<AccountRepository>(singletonCImpl, 3));
      this.provideCurrencyDaoProvider = DoubleCheck.provider(new SwitchingProvider<CurrencyDao>(singletonCImpl, 6));
      this.provideCurrencyRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<CurrencyRepository>(singletonCImpl, 5));
      this.addCategoryRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<AddCategoryRepository>(singletonCImpl, 7));
      this.provideTransactionDaoProvider = DoubleCheck.provider(new SwitchingProvider<TransactionDao>(singletonCImpl, 8));
      this.provideEvaluateExpressionUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<ExpressionCalculator>(singletonCImpl, 9));
      this.provideExpressionRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<ExpressionRepository>(singletonCImpl, 10));
    }

    @Override
    public Set<Boolean> getDisableFragmentGetContextFix() {
      return Collections.<Boolean>emptySet();
    }

    @Override
    public ActivityRetainedComponentBuilder retainedComponentBuilder() {
      return new ActivityRetainedCBuilder(singletonCImpl);
    }

    @Override
    public ServiceComponentBuilder serviceComponentBuilder() {
      return new ServiceCBuilder(singletonCImpl);
    }

    @Override
    public void injectMoneyPrApp(MoneyPrApp moneyPrApp) {
      injectMoneyPrApp2(moneyPrApp);
    }

    private MoneyPrApp injectMoneyPrApp2(MoneyPrApp instance) {
      MoneyPrApp_MembersInjector.injectCategoryRepository(instance, provideCategoryRepositoryProvider.get());
      MoneyPrApp_MembersInjector.injectAccountRepository(instance, provideAccountRepositoryProvider.get());
      MoneyPrApp_MembersInjector.injectCurrencyRepository(instance, provideCurrencyRepositoryProvider.get());
      return instance;
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // ru.ohayo.moneypr.repository.CategoryRepository 
          return (T) AppModule_ProvideCategoryRepositoryFactory.provideCategoryRepository(singletonCImpl.provideCategoryDaoProvider.get());

          case 1: // ru.ohayo.moneypr.data.room.category.CategoryDao 
          return (T) AppModule_ProvideCategoryDaoFactory.provideCategoryDao(singletonCImpl.provideAppDatabaseProvider.get());

          case 2: // ru.ohayo.moneypr.data.room.AppDatabase 
          return (T) AppModule_ProvideAppDatabaseFactory.provideAppDatabase(ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 3: // ru.ohayo.moneypr.repository.AccountRepository 
          return (T) AppModule_ProvideAccountRepositoryFactory.provideAccountRepository(singletonCImpl.provideAccountDaoProvider.get());

          case 4: // ru.ohayo.moneypr.data.room.account.AccountDao 
          return (T) AppModule_ProvideAccountDaoFactory.provideAccountDao(singletonCImpl.provideAppDatabaseProvider.get());

          case 5: // ru.ohayo.moneypr.repository.CurrencyRepository 
          return (T) AppModule_ProvideCurrencyRepositoryFactory.provideCurrencyRepository(singletonCImpl.provideCurrencyDaoProvider.get());

          case 6: // ru.ohayo.moneypr.data.room.currency.CurrencyDao 
          return (T) AppModule_ProvideCurrencyDaoFactory.provideCurrencyDao(singletonCImpl.provideAppDatabaseProvider.get());

          case 7: // ru.ohayo.moneypr.repository.AddCategoryRepository 
          return (T) new AddCategoryRepository(singletonCImpl.provideCategoryDaoProvider.get());

          case 8: // ru.ohayo.moneypr.data.room.transaction.TransactionDao 
          return (T) AppModule_ProvideTransactionDaoFactory.provideTransactionDao(singletonCImpl.provideAppDatabaseProvider.get());

          case 9: // ru.ohayo.moneypr.ui.component.customeKeyboard.ExpressionCalculator 
          return (T) AppModule_ProvideEvaluateExpressionUseCaseFactory.provideEvaluateExpressionUseCase();

          case 10: // ru.ohayo.moneypr.repository.ExpressionRepository 
          return (T) AppModule_ProvideExpressionRepositoryFactory.provideExpressionRepository();

          default: throw new AssertionError(id);
        }
      }
    }
  }
}
